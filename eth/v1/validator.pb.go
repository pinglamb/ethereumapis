// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1/validator.proto

package v1

import (
	fmt "fmt"
	github_com_farazdagi_prysm_shared_types "github.com/farazdagi/prysm-shared-types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	PublicKey                  []byte                                        `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48" spec-name:"pubkey"`
	WithdrawalCredentials      []byte                                        `protobuf:"bytes,2,opt,name=withdrawal_credentials,json=withdrawalCredentials,proto3" json:"withdrawal_credentials,omitempty" ssz-size:"32"`
	EffectiveBalance           uint64                                        `protobuf:"varint,3,opt,name=effective_balance,json=effectiveBalance,proto3" json:"effective_balance,omitempty"`
	Slashed                    bool                                          `protobuf:"varint,4,opt,name=slashed,proto3" json:"slashed,omitempty"`
	ActivationEligibilityEpoch uint64                                        `protobuf:"varint,5,opt,name=activation_eligibility_epoch,json=activationEligibilityEpoch,proto3" json:"activation_eligibility_epoch,omitempty"`
	ActivationEpoch            github_com_farazdagi_prysm_shared_types.Epoch `protobuf:"varint,6,opt,name=activation_epoch,json=activationEpoch,proto3,casttype=github.com/farazdagi/prysm-shared-types.Epoch" json:"activation_epoch,omitempty"`
	ExitEpoch                  github_com_farazdagi_prysm_shared_types.Epoch `protobuf:"varint,7,opt,name=exit_epoch,json=exitEpoch,proto3,casttype=github.com/farazdagi/prysm-shared-types.Epoch" json:"exit_epoch,omitempty"`
	WithdrawableEpoch          github_com_farazdagi_prysm_shared_types.Epoch `protobuf:"varint,8,opt,name=withdrawable_epoch,json=withdrawableEpoch,proto3,casttype=github.com/farazdagi/prysm-shared-types.Epoch" json:"withdrawable_epoch,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                      `json:"-"`
	XXX_unrecognized           []byte                                        `json:"-"`
	XXX_sizecache              int32                                         `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e824961df2399d0, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Validator) GetWithdrawalCredentials() []byte {
	if m != nil {
		return m.WithdrawalCredentials
	}
	return nil
}

func (m *Validator) GetEffectiveBalance() uint64 {
	if m != nil {
		return m.EffectiveBalance
	}
	return 0
}

func (m *Validator) GetSlashed() bool {
	if m != nil {
		return m.Slashed
	}
	return false
}

func (m *Validator) GetActivationEligibilityEpoch() uint64 {
	if m != nil {
		return m.ActivationEligibilityEpoch
	}
	return 0
}

func (m *Validator) GetActivationEpoch() github_com_farazdagi_prysm_shared_types.Epoch {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

func (m *Validator) GetExitEpoch() github_com_farazdagi_prysm_shared_types.Epoch {
	if m != nil {
		return m.ExitEpoch
	}
	return 0
}

func (m *Validator) GetWithdrawableEpoch() github_com_farazdagi_prysm_shared_types.Epoch {
	if m != nil {
		return m.WithdrawableEpoch
	}
	return 0
}

type ValidatorContainer struct {
	Index                uint64     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Balance              uint64     `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Status               string     `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Validator            *Validator `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ValidatorContainer) Reset()         { *m = ValidatorContainer{} }
func (m *ValidatorContainer) String() string { return proto.CompactTextString(m) }
func (*ValidatorContainer) ProtoMessage()    {}
func (*ValidatorContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e824961df2399d0, []int{1}
}
func (m *ValidatorContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorContainer.Merge(m, src)
}
func (m *ValidatorContainer) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorContainer.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorContainer proto.InternalMessageInfo

func (m *ValidatorContainer) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ValidatorContainer) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *ValidatorContainer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ValidatorContainer) GetValidator() *Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func init() {
	proto.RegisterType((*Validator)(nil), "ethereum.eth.v1.Validator")
	proto.RegisterType((*ValidatorContainer)(nil), "ethereum.eth.v1.ValidatorContainer")
}

func init() { proto.RegisterFile("eth/v1/validator.proto", fileDescriptor_3e824961df2399d0) }

var fileDescriptor_3e824961df2399d0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x8a, 0xda, 0x5c,
	0x18, 0xc6, 0x89, 0x9f, 0xe3, 0x8c, 0xe7, 0x6b, 0xeb, 0x78, 0xda, 0x4a, 0x90, 0xa2, 0x12, 0xba,
	0x10, 0x5a, 0x13, 0x9c, 0xe9, 0x62, 0x98, 0x55, 0x51, 0x84, 0x42, 0x37, 0x92, 0x45, 0x17, 0x45,
	0xb0, 0x6f, 0x92, 0xd7, 0xe4, 0x30, 0x31, 0x09, 0x39, 0x27, 0x99, 0x89, 0xfb, 0xde, 0x42, 0x2f,
	0xa2, 0xfb, 0xde, 0x43, 0xe9, 0xaa, 0x57, 0x20, 0xc5, 0x4b, 0x98, 0x65, 0x57, 0x25, 0x47, 0x93,
	0xc8, 0x2c, 0x67, 0x97, 0xe7, 0xcd, 0xf3, 0xfc, 0x0e, 0xbc, 0x7f, 0x48, 0x07, 0x85, 0x67, 0xa4,
	0x63, 0x23, 0x05, 0x9f, 0x39, 0x20, 0xc2, 0x58, 0x8f, 0xe2, 0x50, 0x84, 0xb4, 0x85, 0xc2, 0xc3,
	0x18, 0x93, 0xb5, 0x8e, 0xc2, 0xd3, 0xd3, 0x71, 0x77, 0xe4, 0x32, 0xe1, 0x25, 0x96, 0x6e, 0x87,
	0x6b, 0xc3, 0x0d, 0xdd, 0xd0, 0x90, 0x3e, 0x2b, 0x59, 0x49, 0x25, 0x85, 0xfc, 0xda, 0xe7, 0xb5,
	0x1f, 0x75, 0xd2, 0xfc, 0x54, 0x30, 0xe9, 0x94, 0x90, 0x28, 0xb1, 0x7c, 0x66, 0x2f, 0x6f, 0x30,
	0x53, 0x95, 0x81, 0x32, 0x7c, 0x32, 0x79, 0x7d, 0xbf, 0xed, 0x0f, 0x38, 0xdf, 0x8c, 0x38, 0xdb,
	0xe0, 0xb5, 0xf6, 0xee, 0x4a, 0x1b, 0xf0, 0x08, 0xed, 0x51, 0x00, 0x6b, 0xbc, 0xd6, 0xa2, 0xc4,
	0xba, 0xc1, 0x4c, 0x33, 0x9b, 0xfb, 0xdc, 0x47, 0xcc, 0xe8, 0x07, 0xd2, 0xb9, 0x65, 0xc2, 0x73,
	0x62, 0xb8, 0x05, 0x7f, 0x69, 0xc7, 0xe8, 0x60, 0x20, 0x18, 0xf8, 0x5c, 0xad, 0x49, 0x60, 0xfb,
	0x7e, 0xdb, 0x7f, 0x5a, 0x01, 0x2f, 0x2f, 0x34, 0xf3, 0x65, 0x15, 0x98, 0x56, 0x7e, 0xfa, 0x86,
	0xb4, 0x71, 0xb5, 0x42, 0x5b, 0xb0, 0x14, 0x97, 0x16, 0xf8, 0x10, 0xd8, 0xa8, 0xfe, 0x37, 0x50,
	0x86, 0x75, 0xf3, 0xbc, 0xfc, 0x31, 0xd9, 0xd7, 0xa9, 0x4a, 0x4e, 0xb9, 0x0f, 0xdc, 0x43, 0x47,
	0xad, 0x0f, 0x94, 0xe1, 0x99, 0x59, 0x48, 0xfa, 0x9e, 0xbc, 0x82, 0xdc, 0x0a, 0x82, 0x85, 0xc1,
	0x12, 0x7d, 0xe6, 0x32, 0x8b, 0xf9, 0x4c, 0x64, 0x4b, 0x8c, 0x42, 0xdb, 0x53, 0x4f, 0x24, 0xb1,
	0x5b, 0x79, 0x66, 0x95, 0x65, 0x96, 0x3b, 0xe8, 0x82, 0x9c, 0x1f, 0x13, 0x64, 0xaa, 0x91, 0xa7,
	0x26, 0xe3, 0xbf, 0xdb, 0xfe, 0x71, 0xcb, 0x57, 0x10, 0xc3, 0xc6, 0x01, 0x97, 0x19, 0x51, 0x9c,
	0xf1, 0xf5, 0x88, 0x7b, 0x10, 0xa3, 0x33, 0x12, 0x59, 0x84, 0x5c, 0x97, 0x30, 0xb3, 0x75, 0xf4,
	0x90, 0xa4, 0xcf, 0x09, 0xc1, 0x3b, 0x26, 0x0e, 0xdc, 0xd3, 0xc7, 0x72, 0x9b, 0x39, 0x64, 0x4f,
	0xfc, 0x42, 0x68, 0xd9, 0x51, 0xcb, 0xc7, 0x03, 0xf9, 0xec, 0xb1, 0xe4, 0xf6, 0x31, 0x4c, 0x96,
	0xb4, 0x6f, 0x0a, 0xa1, 0xe5, 0xde, 0x4c, 0xc3, 0x40, 0x00, 0x0b, 0x30, 0xa6, 0x2f, 0xc8, 0x09,
	0x0b, 0x1c, 0xbc, 0x93, 0xbb, 0x53, 0x37, 0xf7, 0x22, 0x1f, 0x4d, 0x31, 0xbd, 0x9a, 0xac, 0x17,
	0x92, 0x76, 0x48, 0x83, 0x0b, 0x10, 0x09, 0x97, 0x63, 0x6d, 0x9a, 0x07, 0x45, 0xaf, 0x48, 0xb3,
	0xdc, 0x74, 0x39, 0xce, 0xff, 0x2f, 0xba, 0xfa, 0x83, 0x55, 0xd7, 0xcb, 0xf7, 0xcd, 0xca, 0x3c,
	0xf9, 0xaa, 0xfc, 0xdc, 0xf5, 0x94, 0xdf, 0xbb, 0x9e, 0xf2, 0x67, 0xd7, 0x53, 0xc8, 0xf3, 0x30,
	0x76, 0x1f, 0x06, 0x27, 0xcf, 0xca, 0xe4, 0x3c, 0x3f, 0x82, 0xb9, 0xf2, 0xf9, 0xed, 0x51, 0x43,
	0x64, 0x1b, 0x40, 0x30, 0xdb, 0x07, 0x8b, 0x1b, 0x45, 0x16, 0x22, 0x26, 0x85, 0x91, 0x8e, 0xbf,
	0xd7, 0x5a, 0xb3, 0x82, 0x38, 0x93, 0xc4, 0x5f, 0x55, 0x65, 0x31, 0x13, 0xde, 0x22, 0x1d, 0x5b,
	0x0d, 0x79, 0x5f, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xd1, 0xcf, 0xca, 0xb9, 0x03,
	0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WithdrawableEpoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.WithdrawableEpoch))
		i--
		dAtA[i] = 0x40
	}
	if m.ExitEpoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.ExitEpoch))
		i--
		dAtA[i] = 0x38
	}
	if m.ActivationEpoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.ActivationEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.ActivationEligibilityEpoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.ActivationEligibilityEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.Slashed {
		i--
		if m.Slashed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.EffectiveBalance != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.EffectiveBalance))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WithdrawalCredentials) > 0 {
		i -= len(m.WithdrawalCredentials)
		copy(dAtA[i:], m.WithdrawalCredentials)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.WithdrawalCredentials)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Validator != nil {
		{
			size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Balance != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.WithdrawalCredentials)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.EffectiveBalance != 0 {
		n += 1 + sovValidator(uint64(m.EffectiveBalance))
	}
	if m.Slashed {
		n += 2
	}
	if m.ActivationEligibilityEpoch != 0 {
		n += 1 + sovValidator(uint64(m.ActivationEligibilityEpoch))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovValidator(uint64(m.ActivationEpoch))
	}
	if m.ExitEpoch != 0 {
		n += 1 + sovValidator(uint64(m.ExitEpoch))
	}
	if m.WithdrawableEpoch != 0 {
		n += 1 + sovValidator(uint64(m.WithdrawableEpoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovValidator(uint64(m.Index))
	}
	if m.Balance != 0 {
		n += 1 + sovValidator(uint64(m.Balance))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Validator != nil {
		l = m.Validator.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalCredentials", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalCredentials = append(m.WithdrawalCredentials[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawalCredentials == nil {
				m.WithdrawalCredentials = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBalance", wireType)
			}
			m.EffectiveBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Slashed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEligibilityEpoch", wireType)
			}
			m.ActivationEligibilityEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEligibilityEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= github_com_farazdagi_prysm_shared_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitEpoch", wireType)
			}
			m.ExitEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitEpoch |= github_com_farazdagi_prysm_shared_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawableEpoch", wireType)
			}
			m.WithdrawableEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawableEpoch |= github_com_farazdagi_prysm_shared_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validator == nil {
				m.Validator = &Validator{}
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
